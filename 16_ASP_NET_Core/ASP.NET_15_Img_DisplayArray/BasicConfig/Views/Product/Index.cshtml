@model SimpleViewModel

<!DOCTYPE html>
<html>
<head>
    <title>Aplikacja</title>
    <meta charset="utf-8">
    <link rel="stylesheet" href="~/StyleSheet.css" />
</head>
<body>
    <table id="some-context" oncopy="return false" oncut="return false" onpaste="return false">
        <tr>
            <td>
                <div>Name:</div>
            </td>
            <td>
                <div>
                    @foreach (var item in Model.NameImages)
                    {
                        <img src="@item">
                    }
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>Email:</div>
            </td>
            <td>
                <div>
                    @foreach (var item in Model.EmailImages)
                    {
                        <img src="@item">
                    }
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>Text:</div>
            </td>
            <td>
                <div>
                    @foreach (var item in Model.SomeLongTextImages)
                    {
                        <img src="@item">
                    }
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>Items list:</div>
            </td>
            <td>
                @foreach (var item in Model.ListImages)
                {
                    <div>
                        @foreach (var piece in item)
                        {
                            <img src="@piece">
                        }
                    </div>

                    <br>
                }
            </td>
        </tr>
    </table>
    <script>

        var table = document.getElementById('some-context');
        window.addEventListener('focus', showTable);
        window.addEventListener('blur', hideTable);

        document.onselectstart = new Function('return false');

        document.oncontextmenu = new Function("return false");

        document.addEventListener("contextmenu", function (e) {
            e.preventDefault();
        }, false);

        document.addEventListener("keyup", function (e) {
            var keyCode = e.keyCode ? e.keyCode : e.which;
            if (keyCode == 44) {
                stopPrntScr();
            }
        });

        makeUnselectable(document.getElementById('some-context'));
        function makeUnselectable(node) {
            if (node.nodeType == 1) {
                node.setAttribute("unselectable", "on");
            }
            var child = node.firstChild;
            while (child) {
                makeUnselectable(child);
                child = child.nextSibling;
            }
        }

        function stopPrntScr() {

            var inpFld = document.createElement("input");
            inpFld.setAttribute("value", ".");
            inpFld.setAttribute("width", "0");
            inpFld.style.height = "0px";
            inpFld.style.width = "0px";
            inpFld.style.border = "0px";
            document.body.appendChild(inpFld);
            inpFld.select();
            document.execCommand("copy");
            inpFld.remove(inpFld);

            hideTable();
        }

        function hideTable() {
            table.style.backgroundColor = 'black';
        }

        function showTable() {
            table.style.backgroundColor = 'white';
        }


        function AccessClipboardData() {
            try {
                window.clipboardData.setData('text', "Access   Restricted");
            } catch (err) {
            }
        }
        setInterval("AccessClipboardData()", 300);
    </script>
</body>
</html>
