@model BasicConfig.Models.ColorNames

<div class="container">
    <div class="row">
        <div class="col-sm-9">
            <p>SVG colors from 147 color names</p>
            <svg id="svg" width="600" height="200" viewBox="0 0 21 7" />
        </div>
    </div>

    <div class="row" style="margin-top:30px">
        <div class="col-sm-9">
            <p>Colors with different approaches</p>
            <svg id="svg" width="600" height="240">
                <rect x="10" y="10" width="200" height="100" fill="red"
                      stroke="green" stroke-width="10" />
                <text x="30" y="40" fill="white">color name</text>
                <g transform="translate(220,0)">
                    <rect x="10" y="10" width="200" height="100"
                          fill="rgb(255,0,0)" stroke="rgb(0,128,0)"
                          stroke-width="10" />
                    <text x="30" y="40" fill="white">rgb(r,g,b)</text>
                </g>
                <g transform="translate(0,120)">
                    <rect x="10" y="10" width="200" height="100" fill="#FF0000"
                          stroke="#008000" stroke-width="10" />
                    <text x="30" y="40" fill="white">Hex number</text>
                </g>
                <g transform="translate(220,120)">
                    <rect x="10" y="10" width="200" height="100"
                          style="fill:hsl(0,100%,50%);stroke:hsl(120,100%,25%)"
                          stroke-width="10" />
                    <text x="30" y="40" fill="white">hsl(h,s,l)</text>
                </g>
            </svg>
        </div>
    </div>

    <!--też linear-gradient możliwy, nie umieściłem-->

    <div class="row" style="margin-top:30px">
        <div class="col-sm-9">
            <p>Color opacity</p>
            <svg id="svg" width="450" height="240">
                <defs>
                    <pattern id="minorGrid" width="10" height="10"
                             patternUnits="userSpaceOnUse">
                        <path d="M 10 0 L 0 0 0 10" fill="none" stroke="gray"
                              stroke-width="0.5" />
                    </pattern>
                    <pattern id="pxGrid" width="50" height="50"
                             patternUnits="userSpaceOnUse">
                        <rect width="50" height="50" fill="url(#minorGrid)" />
                        <path d="M 50 0 L 0 0 0 50" fill="none" stroke="gray"
                              stroke-width="1" />
                    </pattern>
                </defs>
                <rect width="100%" height="100%" fill="url(#pxGrid)" stroke="gray"
                      stroke-width="1" />
                <rect x="10" y="10" width="200" height="100" fill="red"
                      stroke="green" stroke-width="10" opacity="0.8" />
                <text x="20" y="40">opacity = 0.8</text>
                <g transform="translate(220,0)">
                    <rect x="10" y="10" width="200" height="100" fill="red"
                          stroke="green" stroke-width="10" opacity="0.5" />
                    <text x="20" y="40">opacity = 0.5</text>
                </g>
                <g transform="translate(0,120)">
                    <rect x="10" y="10" width="200" height="100" fill="red"
                          stroke="green" stroke-width="10" stroke-opacity="0.5"
                          fill-opacity="0.5" />
                    <text x="20" y="40">fill-opacity = 0.5</text>
                    <text x="20" y="65">stroke-opacity = 0.5</text>
                </g>
                <g transform="translate(220,120)">
                    <rect x="10" y="10" width="200" height="100"
                          style="fill:rgba(255,0,0,0.3);stroke:rgba(0,128,0,0.3)"
                          stroke-width="10" />
                    <text x="20" y="40">rgba(r,g,b,a): a = 0.3</text>
                </g>
            </svg>
        </div>
    </div>
</div>

<svg width="0" height="0">
    <pattern id="p" width="50" height="50" patternUnits="userSpaceOnUse">
        <path d="M0 0 L50 0" stroke="red" />
        <path d="M0 10 L50 10" stroke="lightgreen" />
        <path d="M0 20 L50 20" stroke="lightgreen" />
        <path d="M0 30 L50 30" stroke="lightgreen" />
        <path d="M0 40 L50 40" stroke="lightgreen" />
        <path d="M0 0 L0 50" stroke="red" />
        <path d="M10 0 L10 50" stroke="lightgreen" />
        <path d="M20 0 L20 50" stroke="lightgreen" />
        <path d="M30 0 L30 50" stroke="lightgreen" />
        <path d="M40 0 L40 50" stroke="lightgreen" />
    </pattern>
</svg>

<div class="container">
    <div class="row">
        <div class="col-sm-10">
            <svg width="800" height="800">
                <text x="2" y="10">Unit pattern</text>
                <rect x="0" y="0" width="50" height="50" stroke="none"
                      fill="url(#p)" transform="translate(2,20)" />
                <g transform="translate(110,0)">
                    <text x="0" y="10">Pattern tile: sqaure</text>
                    <rect x="0" y="0" width="250" height="250" stroke="black"
                          stroke-width="2" fill="url(#p)"
                          transform="translate(0,20)" />
                </g>
                <g transform="translate(400,0)">
                    <text x="0" y="10">Pattern tile: cirle</text>
                    <circle cx="127" cy="127" r="125" stroke="black"
                            stroke-width="2" fill="url(#p)"
                            transform="translate(0,20)" />
                </g>
                <g transform="translate(0,330)">
                    <text x="0" y="10">Pattern tile: text</text>
                    <text x="-10" y="200" stroke="black" stroke-width="2"
                          font-family="Arial Black" font-weight="bolder"
                          font-size="270" fill="url(#p)"
                          transform="translate(0,20)">
                        MVC
                    </text>
                </g>
            </svg>
        </div>
    </div>
</div>

<!--i wiele innych....-->
<script>
 var model = @Html.Raw(Json.Serialize(Model));
var svgNS = "http://www.w3.org/2000/svg";
var svg = document.getElementById("svg");
draw();
function draw() {
var col = 21;
for (i = 0; i < model.svgColors.length; i++) {
var name = model.svgColors[i].trim();
var rect = document.createElementNS(svgNS, "rect");
rect.setAttribute("width", 1);
rect.setAttribute("height", 1);
rect.setAttribute("x", i % col);
rect.setAttribute("y", Math.floor(i / col));
rect.style.setProperty("fill", name);
var tip = document.createElementNS(svgNS, "title");
tip.textContent = name;
rect.insertBefore(tip, null);
svg.insertBefore(rect, null);
}
}
</script>
