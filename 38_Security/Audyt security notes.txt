---TOPICS:
- soft: Burp Suite community edition
- inny soft?
HTTP:
- http HEAD nie pobiera ciala, przyspierza silowe szukanie plikow i inne testy
- szczególnie niebezpieczna bywa metoda PUT (często jest ona domyślnie wyłączona), umożliwiająca tworzenie plików na serwerze HTTP
- blokowanie na serwerze metody PUT (pUT, puT itd), testowanie
- Referer header jest wysyłany niezaszyfrowany nawet jak korzystamy z HTTPS. Zabezpieczenie: Referrer-Policy: no-referrer
- SQL Injection, zlokalizowana 22 marca 2019 roku w nagłówku User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) ⤦
Chrome/55.0.2883.87'XOR(if(now()=sysdate(),sleep(5*5),0))OR' - 
- Path Traversal: Accept: ../../../../../../../../../../etc/passwd{{
- parametry, często można manipulować, wysyłane w url GET
- parametry też się wysyła w ciele POST
- manipulacja kontentem, żądanie POST: application/x-www-form-urlencoded
- manipulacja kontentem, POST: multipart/form-data - WAF Bypass Techniques – Using HTTP Standard and Web Servers’ Behaviour
- podatności z GET + ciało
Burp:
- zakładce proxy można je skonfigurować i przechwytywać (intercept) zapytania i odpowiedzi, konfig w Opcjach
- do repeatera można skopiować żądanie
- intruder służy do enumeracji parametrów żądania //COMMUNITY EDITION IS LIMITED
- comparer służy do porównywania żądzań lub odpowiedzi
- decoder służy do dekodowanie z BASE64 lub innego formatu
- sequencer służy do analizy entropii tokena - spr identyfikatory sesji
- HTTPS z Burp -> 127.0.0.1:8080 w przeglądarce -> save cert -> dodanie cert do przeglądarki (coś hurde fajans nie działa. do spr ostatni certyfikat PortSwigger CA)
- socks proxy host jedt do wykorzystania proxy
Do najpopularniejszych (nagłówków) – związanych z bezpieczeństwem – należy zaliczyć:
- HTTP Strict Transport Security (HSTS)
- Content-Security-Policy
- X-Frame-Options
- X-Content-Type-Options
- Referrer-Policy
- Feature-Policy
- Access-Control-Allow-Origin
Chrome / Firefox dev tools:
- szukanie iframe
- endpointy API
- odwracanie minifikacji kodu JS w zakładce Sources
- zakładka Elements zawiera też kod dodany dynamicznie przez JS
- podejrzenie ciasteczek
- debugger pozwala podejrzenie wartości w kodzie
- Punkty wejścia i wykonania kodu (sources oraz execution sinks) <- do ogarnięcia: Na kanale @LiveOverflow w serwisie YouTube
Hasła:
- atak słownikowy
- atak siłowy
- atak mieszany (słownikowy + siłowy)
- atak tęczowe tablice
- listy najczęściej używanych haseł
- unimożliwiać użycie łatwego hasła
- uniemożliwić użycie hasłą takeigo samego jak login / email
- utrudnianie powtazralności ataków (opóźnienia, spowolnienia, captcha)
- wymuszanie znaków specjalnych, cyfr, capsów
- najbezpieczniej zapisane hasło: sól (indywidualnie), pieprz (osobne źródło), hashowanie SHA512
Rekonesans:
- lokalizacja serwerów nmap (urządzenie do skanowania portów) "W tym przypadku realizujemy sprawdzenie wszystkich portów TCP (0–65535) oraz skanowanie z wersjonowaniem (-sV). Możemy również posłużyć się skryptem http-headers, który dodatkowo wyświetli nagłówki odpowiedzi HTTP."
- szukanie domen powiązanych i subdomen za pomocą: google/bing/yandex, serwisów i API, szukanie po IP, metoda słownikowa, wyszukiwarki Certificate Transparency logs, Projekt Sonar
- wsteczna inżynieria aplikacji mobilnych w poszukiwaniu domen, linków itd
- domeny wirtualne (?)
Ukryte katalogi i pliki:


---TODO:
- modify requests and responses with C# (how?)?
- intruder c# (simple url + request setup)?

---OWASP WEBSITES:
https://owasp.org/www-project-top-ten/
https://dvwa.co.uk/
https://www.youtube.com/watch?v=IWWYNDiwYOA
https://www.zaproxy.org/
https://www.youtube.com/watch?v=2_lswM1S264