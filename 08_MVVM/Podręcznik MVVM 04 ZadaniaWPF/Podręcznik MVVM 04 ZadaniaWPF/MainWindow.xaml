<Window x:Class="Podręcznik_MVVM_04_ZadaniaWPF.MainWindow"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
		xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:local="clr-namespace:Podręcznik_MVVM_04_ZadaniaWPF"
		xmlns:mw="clr-namespace:Podręcznik_MVVM_04_ZadaniaWPF.ModelWidoku"
		xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
		xmlns:s="clr-namespace:System;assembly=mscorlib"
		mc:Ignorable="d"
		Title="ZadaniaWPF" Height="500" Width="500">
	<!--i: dla interactivity, dodajemy przez projct->add reference, wyżej wklejamy xmlns-->
	<!--xmlns:mw oznacza ścieżkę do folderu(warstwy) viewmodel-->

	<!--wyzwalacz interakcji przy zamykaniu okna-->
	<i:Interaction.Triggers>
		<i:EventTrigger EventName="Closed">
			<!--wywołanie funkcji Zapisz przez trigger Closed-->
			<!--chyba automatycznie wyszukuje w folderze mw ICommand Zapisz. w książce nie jest wyjaśnione-->
			<i:InvokeCommandAction Command="{Binding Zapisz}" />
		</i:EventTrigger>
	</i:Interaction.Triggers>

	<!--kontekst danych dla okna, gdy na przykład po wciśnięciu klawisza coś ma się wydarzyć, itp.-->
	<Window.DataContext>
		<!--Zassanie kontekstu z klasy Zadania w MW-->
		<mw:ZadaniaViewModel />
	</Window.DataContext>

	<!--jest słownikiem, każdy element ma mieć klucz typu string-->
	<!--też wrzuca się klucze konwerterów-->
	<!--też wrzuca się style i formaty-->
	<Window.Resources>
		<Style TargetType="{x:Type DatePickerTextBox}">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<!--binduje z wbudowaną klasą PropertyPath-->
						<TextBox Text="{Binding Path=SelectedDate,
							StringFormat={}{0:dd MMMM yyyy}, ConverterCulture=pl-PL,
							RelativeSource={RelativeSource AncestorType={x:Type DatePicker}}}"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<!--poniżej są konwertery-->
		<BooleanToVisibilityConverter x:Key="boolToVisibility" />
		<local:ZadanieConverter x:Key="twórzZadanie" />
		<local:PriorytetZadaniaToString x:Key="priorytetToString" />
		<local:PriorytetZadaniaToBrush x:Key="priorytetToBrush" />
		<local:BoolToBrushConverter x:Key="czyZrealizowaneToBrush" KolorDlaFałszu="Black" KolorDlaPrawdy="Gray"/>
		<local:BoolToBrushConverter x:Key="czyPoTerminieToBrush" KolorDlaFałszu="Green" KolorDlaPrawdy="Red" />
		<local:BoolToTextDecorationConverter x:Key="czyZrealizowaneToTextDecoration" />
		<!--opisanie stylu "stylPrzycisku"-->
		<Style x:Key="stylPrzycisku" TargetType="Button">
			<Setter Property="FontSize" Value="10" />
			<Setter Property="Margin" Value="5" />
			<Setter Property="Width" Value="85" />
			<Setter Property="Height" Value="20" />
			<Setter Property="HorizontalAlignment" Value="Right" />
			<Setter Property="VerticalAlignment" Value="Top" />
		</Style>
	</Window.Resources>
	<!--koniec zasobów okna-->

	<!--siatka-->
	<Grid Height="471" Margin="0,0,0.333,-0.333" VerticalAlignment="Top">
		<Grid.RowDefinitions>
			<RowDefinition/>
			<RowDefinition Height="0*"/>
		</Grid.RowDefinitions>
		<TextBlock Margin="10,10,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Text="Liczba zadań: " Height="16" Width="173">
			<!--wiązanie ilości rekordów z tekstem-->
			<!--Run wpisuje sformatowany, lub nie, tekst-->
			<Run Text="{Binding Path=ListaZadań.Count, Mode=OneWay}" />
		</TextBlock>

		<!--kontrolka ListBox pokazuje szczegóły elementó kolekcji z Zadania.cs w VM-->
		<!--poniżej zawartość pojedyńczej kontrolki elementu ListBox -->
		<ListBox x:Name="lbListaZadań" Margin="10,35,10,177.667" ItemsSource="{Binding Path=ListaZadań}">
			<!--szablon rekordu-->
			<ListBox.ItemTemplate>
				<DataTemplate>
					<StackPanel Orientation="Vertical" Margin="3">
						<StackPanel Orientation="Horizontal">
							<!--Foreground binding pobiera bool dla realizacji, Foreground Resource nadaje kolor-->
							<!--TextDecorations pobiera bool, i skreśla na podstawie bool, jeśli wykonany-->
							<TextBlock Text="{Binding Path=Opis, Mode=OneWay}" Width="300" FontSize="20"
								Foreground="{Binding CzyZrealizowane,
								Converter={StaticResource czyZrealizowaneToBrush}}"
								TextDecorations="{Binding CzyZrealizowane,
								Converter={StaticResource czyZrealizowaneToTextDecoration}}"/>
							<!--ciągnie ztyl z zasobów, widoczny gdy włączony-->
							<!--korzysta z wbudowanego konwertera BooleanToVisibilityConverter-->
							<Button Content="Zrealizowane" Command="{Binding Path=OznaczJakoZrealizowane}"
									Style="{StaticResource stylPrzycisku}"
									Visibility="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled,
									Mode=OneWay, Converter={StaticResource boolToVisibility}}"/>
							<!--ciągnie ztyl z zasobów, widoczny gdy włączony-->
							<!--boolToVisibility-korzysta z wbudowanego konwertera BooleanToVisibilityConverter-->
							<Button Content="Niezrealizowane" Command="{Binding Path=OznaczJakoNiezrealizowane}"
									Style="{StaticResource stylPrzycisku}"
									Visibility="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled,
									Mode=OneWay, Converter={StaticResource boolToVisibility}}"/>
						</StackPanel>
						<!--konwertery i wiązanie jak wcześniej-->
						<TextBlock>
							Priorytet: <Run Text="{Binding Path=Priorytet, Mode=OneWay,
							Converter={StaticResource priorytetToString}}"
							Foreground="{Binding Path=Priorytet, Mode=OneWay,
							Converter={StaticResource priorytetToBrush}}" />,
							Termin: <Run Text="{Binding Path=PlanowanyTerminRealizacji, Mode=OneWay, StringFormat={}{0:dd MMMM yyyy}, ConverterCulture=pl-PL}"
							Foreground="{Binding
							Path=CzyZadaniePozostajeNiezrealizowanePoPlanowanymTerminie,
							Mode=OneWay,
							Converter={StaticResource czyPoTerminieToBrush}}" />,
							Utworzone: <Run Text="{Binding Path=DataUtworzenia, Mode=OneWay, StringFormat={}{0:dd MMMM yyyy}, ConverterCulture=pl-PL}" />
						</TextBlock>
					</StackPanel>
				</DataTemplate>
			</ListBox.ItemTemplate>
			<!--Koniec szablonu rekordu-->

			<!--Style elementów wyświetlanego rekordu-->
			<ListBox.ItemContainerStyle>
				<Style TargetType="ListBoxItem">
					<Setter Property="Control.Margin" Value="3" />
					<Setter Property="Control.BorderBrush" Value="Black"/>
					<Setter Property="Control.BorderThickness" Value="1" />
					<!--wyzwalacz zmiany stylu gdy mysz najedzie na rekord-->
					<Style.Triggers>
						<Trigger Property="Control.IsMouseOver" Value="True">
							<Setter Property="Control.Background" Value="LightGray" />
						</Trigger>
					</Style.Triggers>
				</Style>
			</ListBox.ItemContainerStyle>
		</ListBox>

		<!--Warunkowe wywoływanie okna dialogowego-->
		<!--wyrzuca zapytanie jeśli chcemy usunąć niewykonane zadanie. klasa do ogarnięcia jeszcze-->
		<!--caption-nazwa, IsDialogBypassed - sprawdza czy jest aktywne zadanie-->
		<!--DialogBypassButton-przycisk obejścia dialogu, tzn wykonania zadania i CommandYes-->
		<local:ConditionalMessageDialogBox x:Name="questionYesNo" Caption="ZadaniaWPF"
										   IsDialogBypassed="{Binding ElementName=lbListaZadań,
											Path=SelectedValue.CzyZrealizowane}"
											DialogBypassButton="Yes"
										   Icon="Question" Buttons="YesNo"
											CommandYes="{Binding Path=UsuńZadanie}"
										   CommandParameter="{Binding ElementName=lbListaZadań, Path=SelectedIndex}" />
		<!--przycisk usuwania zadań-->
		<!--wykorzystanie stylu z zasobów okna-->
		<!--Binding-pokazanie okna dialogowego o nazwie "questionYesNo"-->
		<!--CommandParameter-treść pytania-->
		<Button Content="Usuń zadanie"
				HorizontalAlignment="Left"
				VerticalAlignment="Bottom"
				Margin="10,0,0,148.667" Width="100" Height="25"
				Style="{StaticResource stylPrzycisku}"
				Command="{Binding ElementName=questionYesNo, Path=Show}"
				CommandParameter="Czy jesteś pewien, że chcesz usunąć zadanie?" />

		<!--Dolne okno tworzenia zadania-->
		<GroupBox Header="Nowe zadanie" Margin="10,0,10,10" MinWidth="420"
			Height="140" VerticalAlignment="Bottom">
			<Grid>
				<Label Content="Opis:" Margin="10,5,0,0"
					HorizontalAlignment="Left" VerticalAlignment="Top"/>
				<TextBox x:Name="tbOpis" Height="23"
					Margin="10,30,10,0" VerticalAlignment="Top" />
				<Label Content="Priorytet:" Margin="10,60,0,0"
					HorizontalAlignment="Left" VerticalAlignment="Top"/>
				<ComboBox x:Name="cbPriorytet" Margin="10,85,0,0" Width="120"
					HorizontalAlignment="Left" VerticalAlignment="Top">
					<ComboBoxItem>Mniej ważne</ComboBoxItem>
					<!--IsSelected-domyślna wartość-->
					<ComboBoxItem IsSelected="True">Ważne</ComboBoxItem>
					<ComboBoxItem>Krytyczne</ComboBoxItem>
				</ComboBox>
				<Label Content="Termin realizacji:" Margin="160,60,0,0"
					HorizontalAlignment="Left" VerticalAlignment="Top"/>
				<DatePicker x:Name="dpTerminRealizacji" Margin="160,85,0,0"
					HorizontalAlignment="Left" VerticalAlignment="Top"
					SelectedDate="{x:Static s:DateTime.Now}" />

				<!--urucham. poleceń przed wyświetleniem lub po wyświetleniu okna dialogowego, dodawanie zadania-->
				<local:NotificationDialogBox x:Name="notificationDialogBox"
					Caption="ZadaniaWPF" CommandBefore="{Binding Path=DodajZadanie}">
					<local:NotificationDialogBox.CommandParameter>
						<!--multiwiązanie kilku właściwości i przekazanie do klasy ZadanieConverter-->
						<!--w pliku Konwertery.cs->ZadanieConverter-wiązane właściwości są przez values[0]-->
						<MultiBinding Converter="{StaticResource twórzZadanie}">
							<Binding ElementName="tbOpis" Path="Text" />
							<Binding ElementName="dpTerminRealizacji" Path="SelectedDate" />
							<Binding ElementName="cbPriorytet" Path="Text" />
						</MultiBinding>
					</local:NotificationDialogBox.CommandParameter>
				</local:NotificationDialogBox>
				<!--przycisk dodania zadania-->
				<!--pokazuje dialogbox klasy-->
				<!--umiejscowienie i styl w 4 pierwszych liniach-->
				<!--ostatnia linia-code behind, bindowanie do klasy NotificationDialogBox-->
				<Button Content="Dodaj zadanie"
						Margin="0,83,9.8,0" HorizontalAlignment="Right" VerticalAlignment="Top"
						Width="100" Height="25"
						Style="{StaticResource stylPrzycisku}"
						Command="{Binding ElementName=notificationDialogBox, Path=Show}"
						CommandParameter="Zadanie zostało dodane"
						Click="Button_Click">
				</Button>
			</Grid>
		</GroupBox>

		<!--przycisk sortowania-->
		<Button Content="Sortuj wg priorytetów"
				HorizontalAlignment="Left" VerticalAlignment="Bottom"
				Margin="120,0,0,148.667" Width="130" Height="25"
				Style="{StaticResource stylPrzycisku}"
				Command="{Binding Path=SortujZadania}" CommandParameter="True" />
		<!--przycisk sortowania-->
		<Button Content="Sortuj wg terminów"
				HorizontalAlignment="Left" VerticalAlignment="Bottom"
				Margin="260,0,0,148.667" Width="120" Height="25"
				Style="{StaticResource stylPrzycisku}"
				Command="{Binding Path=SortujZadania}" CommandParameter="False" />

		<!--przycisk "o mnie"-->
		<local:SimpleMessageDialogBox x:Name="simpleMessageDialogBox" Caption="ZadaniaWPF" />
		<Button Content="O..." HorizontalAlignment="Right" VerticalAlignment="Bottom"
				Margin="0,0,26,148.667" Width="60" Height="25"
				Style="{StaticResource stylPrzycisku}"
				Command="{Binding ElementName=simpleMessageDialogBox, Path=Show}"
				CommandParameter="ZadaniaWPF&#x0a;(c) Jacek Matulewski 2015&#x0a;WWW:
				http://www.fizyka.umk.pl/~jacek" />

		<local:SaveFileDialogBox
				x:Name="saveFileDialogBox"
				Caption="Zapisz do pliku tekstowego"
				Filter="Pliki tekstowe (*.txt)|*.txt|Wszystkie pliki (*.*)|*.*"
				FilterIndex="0" DefaultExt="txt" Margin="0,1,0,-1"
				CommandFileOk="{Binding EksportujZadaniaDoPlikuTekstowego}"/>
		<!--CommandFileOk się odwołuje do klasy EksportujZadaniaDoPlikuTekstowego w Zadania.cs-->

		<Button Content="Eksportuj..."
				HorizontalAlignment="Right" VerticalAlignment="Bottom"
				Margin="0,0,26,120.667" Width="90" Height="25"
				Style="{StaticResource stylPrzycisku}"
				Command="{Binding Show, ElementName=saveFileDialogBox}" />
		<!--ElementName się odwołuje do przestrzeni SaveFileDialogBox o nazwie saveFileDialogBox-->


		<!--Przykład użycia okna dialogowego z dowolną treścią-->
		<local:CustomContentDialogBox
				x:Name="dodajZadanieDialogBox"
				Caption="Dodaj zadanie"
				WindowWidth="440" WindowHeight="160"
			CommandTrue="{Binding Path=DodajZadanie}">
				<!--caption nadaje nazwę)-->
			<!--OSTATNIEJ LINIJKI BRAKOWAŁO!!-->
			<local:CustomContentDialogBox.CommandParameter>
				<MultiBinding Converter="{StaticResource twórzZadanie}">
					<Binding ElementName="tbOpis1" Path="Text" />
					<Binding ElementName="dpTerminRealizacji1" Path="SelectedDate" />
					<Binding ElementName="cbPriorytet1" Path="Text" />
				</MultiBinding>
				<!--MULTIBINDING LINIJKI BRAKOWAŁO!!-->
			</local:CustomContentDialogBox.CommandParameter>
			<!--układ w siatce nowego okna dialogowego, poniżej-->
			<Grid>
				<Label Content="Opis:" Margin="10,5,0,0"
						HorizontalAlignment="Left" VerticalAlignment="Top"/>
				<TextBox x:Name="tbOpis1" Height="23"
						Margin="10,30,10,0" VerticalAlignment="Top" />
				<Label Content="Priorytet:" Margin="10,60,0,0"
						HorizontalAlignment="Left" VerticalAlignment="Top"/>
				<ComboBox x:Name="cbPriorytet1" Margin="10,85,0,0" Width="120"
						HorizontalAlignment="Left" VerticalAlignment="Top">
					<ComboBoxItem>Mniej ważne</ComboBoxItem>
					<ComboBoxItem IsSelected="True">Ważne</ComboBoxItem>
					<ComboBoxItem>Krytyczne</ComboBoxItem>
				</ComboBox>
				<Label Content="Termin realizacji:" Margin="160,60,0,0"
						HorizontalAlignment="Left" VerticalAlignment="Top"/>
				<DatePicker x:Name="dpTerminRealizacji1" Margin="160,85,0,0"
						HorizontalAlignment="Left" VerticalAlignment="Top"
						SelectedDate="{x:Static s:DateTime.Now}">
				</DatePicker>
				<!--przycisk dodawania zadania w nowym oknie dialogowym (NIE DZIAŁA)-->
				<Button Content="Dodaj zadanie"
						Margin="0,83,9.8,0" HorizontalAlignment="Right" VerticalAlignment="Top"
						Width="100" Height="25"
						Style="{StaticResource stylPrzycisku}"
						local:CustomContentDialogBox.CustomContentDialogResult="True" >
					<!--OSTATNIEJ LINII BRAKOWAŁO-->
				</Button>
			</Grid>
		</local:CustomContentDialogBox>


		<Button Content="Dodaj zadanie..."
				HorizontalAlignment="Left" VerticalAlignment="Bottom"
				Margin="10,0,0,121.667" Width="100" Height="25"
				Style="{StaticResource stylPrzycisku}"
				Command="{Binding ElementName=dodajZadanieDialogBox, Path=Show}"/>
		<!--style(szablon stylu), -->

	</Grid>
</Window>