<!DOCTYPE html>
<html>
<head>
    <title>Aplikacja</title>
    <meta charset="utf-8">
</head>
<body class="container">
    <div>
        TEST
    </div>
    <script>
        //callback
        setTimeout(() => console.log("Tick"), 5000);

        //error handling from callback
        new Promise((_, reject) => reject(new Error("Fail")))
            .then(value => console.log("Handler 1"))
            .catch(reason => {
                console.log("Caught failure " + reason);
                return "nothing";
            })
            .then(value => console.log("Handler 2", value));
// → Caught failure Error: Fail
// → Handler 2 nothing

        //async
        requestType("storage", (nest, name) => storage(nest, name));
        function findInStorage(nest, name) {
            return storage(nest, name).then(found => {
                if (found != null) return found;
                else return findInRemoteStorage(nest, name);
            });
        }
        function network(nest) {
            return Array.from(nest.state.connections.keys());
        }
        function findInRemoteStorage(nest, name) {
            let sources = network(nest).filter(n => n != nest.name);
            function next() {
                if (sources.length == 0) {
                    return Promise.reject(new Error("Not found"));
                } else {
                    let source = sources[Math.floor(Math.random() *
                        sources.length)];
                    sources = sources.filter(n => n != source);
                    return routeRequest(nest, source, "storage", name)
                        .then(value => value != null ? value : next(),
                            next);
                }
            }
            return next();
        }
    </script>
</body>
</html>