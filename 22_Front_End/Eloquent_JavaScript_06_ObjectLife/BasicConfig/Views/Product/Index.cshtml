<!DOCTYPE html>
<html>
<head>
    <title>Aplikacja</title>
    <meta charset="utf-8">
</head>
<body class="container">
    <div>
        TEST
    </div>
    <script>
        let rabbit = {};
        rabbit.speak = function (line) {
            console.log(`The rabbit says '${line}'`);
        };
        rabbit.speak("I'm alive.");
        // → The rabbit says 'I'm alive.'

        //prototypes
        let empty = {};
        console.log(empty.toString);
        // → function toString()…{}
        console.log(empty.toString());
        // → [object Object]

        /*
        let protoRabbit = {
            speak(line) {
                console.log(`The ${this.type} rabbit says '${line}'`);
            }
        };
        let killerRabbit = Object.create(protoRabbit);
        killerRabbit.type = "killer";
        killerRabbit.speak("SKREEEE!");
        // → The killer rabbit says 'SKREEEE!'

        //class before 2015
        function makeRabbit(type) {
            let rabbit = Object.create(protoRabbit);
            rabbit.type = type;
            return rabbit;
        }
        */

        //class after 2015
        class Rabbit {
            constructor(type) {
                this.type = type;
            }
            speak(line) {
                console.log(`The ${this.type} rabbit says '${line}'`);
            }
        }
        let killerRabbit = new Rabbit("killer");
        let blackRabbit = new Rabbit("black");

        blackRabbit.speak('no i chuj no i cześć');

        //map
        let ages = new Map();
        ages.set("Boris", 39);
        ages.set("Liang", 22);
        ages.set("Júlia", 62);
        console.log(`Júlia is ${ages.get("Júlia")}`);
        // → Júlia is 62
        console.log("Is Jack's age known?", ages.has("Jack"));
        // → Is Jack's age known? false
        console.log(ages.has("toString"));
        // → false

        //symbols
        let sym = Symbol("name");
        console.log(sym == Symbol("name"));
        // → false
        Rabbit.prototype[sym] = 55;
        console.log(blackRabbit[sym]);
        // → 55

        //iterable interface
        class Matrix {
            constructor(width, height, element = (x, y) => undefined) {
                this.width = width;
                this.height = height;
                this.content = [];
                for (let y = 0; y < height; y++) {
                    for (let x = 0; x < width; x++) {
                        this.content[y * width + x] = element(x, y);
                    }
                }
            }
            get(x, y) {
                return this.content[y * this.width + x];
            }
            set(x, y, value) {
                this.content[y * this.width + x] = value;
            }
        }

        //get set
        class Temperature {
            constructor(celsius) {
                this.celsius = celsius;
            }
            get fahrenheit() {
                return this.celsius * 1.8 + 32;
            }
            set fahrenheit(value) {
                this.celsius = (value - 32) / 1.8;
            }
            static fromFahrenheit(value) {
                return new Temperature((value - 32) / 1.8);
            }
        }
        let temp = new Temperature(22);
        console.log(temp.fahrenheit);
        // → 71.6
        temp.fahrenheit = 86;
        console.log(temp.celsius);
        // → 30
    </script>
</body>
</html>